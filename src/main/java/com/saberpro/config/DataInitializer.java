package com.saberpro.config;

import com.saberpro.model.EstudianteResultado;
import com.saberpro.model.ResultadoSaberPro;
import com.saberpro.model.TipoIncentivo;
import com.saberpro.model.Usuario;
import com.saberpro.repository.EstudianteResultadoRepository;
import com.saberpro.repository.ResultadoSaberProRepository;
import com.saberpro.repository.TipoIncentivoRepository;
import com.saberpro.repository.UsuarioRepository;
import com.saberpro.service.IncentivoEvaluacionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

@Component
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private UsuarioRepository usuarioRepository;
    
    @Autowired
    private ResultadoSaberProRepository resultadoRepository;
    
    @Autowired
    private EstudianteResultadoRepository estudianteResultadoRepository;

    
    @Autowired
    private TipoIncentivoRepository tipoIncentivoRepository;
    
    @Autowired
    private IncentivoEvaluacionService evaluacionService;

    @Override
    public void run(String... args) throws Exception {
        System.out.println("üöÄ ==========================================");
        System.out.println("üöÄ === INICIALIZANDO APLICACI√ìN ===");
        System.out.println("üöÄ ==========================================");
        System.out.println("üöÄ Timestamp: " + java.time.LocalDateTime.now());
        System.out.println("üöÄ DataInitializer ejecut√°ndose...");
        
        try {
            // Test de conexi√≥n a MongoDB
            System.out.println("üîó === VERIFICANDO CONEXI√ìN A MONGODB ===");
            long totalUsuarios = usuarioRepository.count();
            long totalResultados = resultadoRepository.count();
            System.out.println("üîó Conexi√≥n exitosa a MongoDB");
            System.out.println("üîó Total usuarios en BD: " + totalUsuarios);
            System.out.println("üîó Total resultados en BD: " + totalResultados);
            
            // Limpiar datos existentes (solo en desarrollo)
            // usuarioRepository.deleteAll();
            // resultadoRepository.deleteAll();

            // üîÑ CAMBIO DE ORDEN: Crear resultados PRIMERO, luego usuarios
            // Crear resultados de ejemplo basados en los datos del Excel
            System.out.println("ÔøΩ === INICIALIZANDO RESULTADOS ===");
            initializeResultadosEjemplo();
            
            // Crear usuarios de ejemplo si no existen (DESPU√âS de los estudiantes)
            System.out.println("ÔøΩ === INICIALIZANDO USUARIOS ===");
            initializeUsuarios();
            
            // Crear tipos de incentivos configurables
            System.out.println("ÔøΩ === INICIALIZANDO TIPOS DE INCENTIVOS ===");
            initializeTiposIncentivos();
            
            // Evaluar autom√°ticamente incentivos para estudiantes existentes
            System.out.println("ü§ñ === EVALUACI√ìN AUTOM√ÅTICA DE INCENTIVOS ===");
            evaluarIncentivoAutomatico();
            
            // Verificaci√≥n final
            System.out.println("‚úÖ === VERIFICACI√ìN FINAL ===");
            totalUsuarios = usuarioRepository.count();
            totalResultados = resultadoRepository.count();
            long totalTiposIncentivos = tipoIncentivoRepository.count();
            System.out.println("‚úÖ Total usuarios despu√©s de inicializaci√≥n: " + totalUsuarios);
            System.out.println("‚úÖ Total resultados despu√©s de inicializaci√≥n: " + totalResultados);
            System.out.println("‚úÖ Total tipos de incentivos despu√©s de inicializaci√≥n: " + totalTiposIncentivos);
            
            System.out.println("üöÄ ==========================================");
            System.out.println("üöÄ === INICIALIZACI√ìN COMPLETADA ===");
            System.out.println("üöÄ ==========================================");
            
        } catch (Exception e) {
            System.err.println("üí• ERROR CR√çTICO en DataInitializer:");
            System.err.println("üí• Excepci√≥n: " + e.getClass().getSimpleName());
            System.err.println("üí• Mensaje: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    private void initializeUsuarios() {
        // Coordinador
        if (usuarioRepository.findByDocumento("admin").isEmpty()) {
            Usuario coordinador = new Usuario("admin", "COORDINADOR", "admin");
            usuarioRepository.save(coordinador);
            System.out.println("üë§ Usuario coordinador creado: admin/admin");
        }

        // üÜï Generar usuarios autom√°ticamente para todos los estudiantes en estudiantes_resultados
        List<EstudianteResultado> estudiantes = estudianteResultadoRepository.findAll();
        System.out.println("üéì Generando usuarios para " + estudiantes.size() + " estudiantes encontrados...");
        
        int usuariosCreados = 0;
        for (EstudianteResultado estudiante : estudiantes) {
            if (usuarioRepository.findByDocumento(estudiante.getDocumento()).isEmpty()) {
                // Usar documento como correo y contrase√±a
                Usuario usuarioEstudiante = new Usuario(estudiante.getDocumento(), "ESTUDIANTE", estudiante.getDocumento());
                usuarioRepository.save(usuarioEstudiante);
                usuariosCreados++;
                System.out.println("üéì Usuario estudiante creado: " + estudiante.getDocumento() + " (" + 
                                 estudiante.getPrimerNombre() + " " + estudiante.getPrimerApellido() + 
                                 ") - Usuario: " + estudiante.getDocumento() + "/" + estudiante.getDocumento());
            }
        }
        
        System.out.println("‚úÖ Usuarios estudiantes creados: " + usuariosCreados);
        System.out.println("üë• === FIN INICIALIZACI√ìN USUARIOS ===");
    }

    private void initializeResultadosEjemplo() {
        // Solo crear si no existen datos
        if (resultadoRepository.count() > 0) {
            return;
        }

        // Datos basados en el Excel proporcionado
        List<ResultadoSaberPro> resultadosEjemplo = Arrays.asList(
            crearResultado("EK20183140703", "CC", "QUINTERO", "", "JUAN", "CARLOS", 
                "juan.quintero@uts.edu.co", "3201234567", "Ingenier√≠a de Sistemas", 165,
                125, 151, 179, 163, 205, 182, 136),
                
            crearResultado("EK20183040545", "CC", "PARRA", "MARTINEZ", "MARIA", "FERNANDA", 
                "maria.parra@uts.edu.co", "3109876543", "Ingenier√≠a de Sistemas", 164,
                159, 172, 182, 142, 165, 167, 148),
                
            crearResultado("EK20183025381", "CC", "ANAYA", "LOPEZ", "CARLOS", "EDUARDO", 
                "carlos.anaya@uts.edu.co", "3156789012", "Ingenier√≠a de Sistemas", 160,
                146, 199, 157, 149, 147, 174, 171),
                
            crearResultado("EK20183025335", "CC", "FLOR", "GARCIA", "ANA", "LUCIA", 
                "ana.flor@uts.edu.co", "3187654321", "Ingenier√≠a de Sistemas", 160,
                198, 153, 147, 157, 146, 168, 160),
                
            crearResultado("EK20183122648", "CC", "GARCIA", "RODRIGUEZ", "PEDRO", "ANTONIO", 
                "pedro.garcia@uts.edu.co", "3145678901", "Ingenier√≠a de Sistemas", 157,
                179, 172, 158, 140, 136, 128, 142),
                
            crearResultado("EK20183064605", "CC", "MANOSALVA", "PEREZ", "SOFIA", "ANDREA", 
                "sofia.manosalva@uts.edu.co", "3123456789", "Ingenier√≠a de Sistemas", 153,
                115, 152, 159, 172, 165, 142, 119),
                
            crearResultado("EK20183187351", "CC", "MENDOZA", "TORRES", "LUIS", "FERNANDO", 
                "luis.mendoza@uts.edu.co", "3167890123", "Ingenier√≠a de Sistemas", 151,
                132, 123, 125, 169, 204, 173, 171),
                
            crearResultado("EK20183233820", "CC", "BELTRAN", "VARGAS", "DIANA", "CAROLINA", 
                "diana.beltran@uts.edu.co", "3134567890", "Ingenier√≠a de Sistemas", 150,
                86, 187, 160, 171, 148, 162, 142),

            // Estudiantes con puntajes altos para mostrar incentivos
            crearResultado("EK20183030016", "CC", "SANTAMARIA", "GUTIERREZ", "ALEJANDRO", "JOSE", 
                "alejandro.santamaria@uts.edu.co", "3198765432", "Ingenier√≠a de Sistemas", 245,
                209, 183, 155, 164, 133, 174, 154),
                
            crearResultado("EK20183047073", "CC", "SANCHEZ", "MORALES", "CAROLINA", "PATRICIA", 
                "carolina.sanchez@uts.edu.co", "3176543210", "Ingenier√≠a de Sistemas", 220,
                93, 157, 138, 135, 152, 176, 165),

            // Estudiante con puntaje insuficiente
            crearResultado("EK20183236451", "CC", "ROMERO", "CASTRO", "MIGUEL", "ANGEL", 
                "miguel.romero@uts.edu.co", "3112345678", "Ingenier√≠a de Sistemas", 75,
                125, 136, 145, 150, 126, 148, 131)
        );

        // Guardar todos los resultados con c√°lculos autom√°ticos
        for (ResultadoSaberPro resultado : resultadosEjemplo) {
            // Calcular niveles de competencias usando la l√≥gica directa
            resultado.setComunicacionEscritaNivel(calcularNivelCompetencia(resultado.getComunicacionEscrita()));
            resultado.setRazonamientoCuantitativoNivel(calcularNivelCompetencia(resultado.getRazonamientoCuantitativo()));
            resultado.setLecturaCriticaNivel(calcularNivelCompetencia(resultado.getLecturaCritica()));
            resultado.setCompetenciasCiudadanasNivel(calcularNivelCompetencia(resultado.getCompetenciasCiudadanas()));
            resultado.setInglesNivel(calcularNivelCompetencia(resultado.getIngles()));
            resultado.setDisenoSoftwareNivel(calcularNivelCompetencia(resultado.getDisenoSoftware()));
            
            // Guardar el resultado
            resultadoRepository.save(resultado);
        }
    }

    private ResultadoSaberPro crearResultado(String documento, String tipoDoc, String apellido1, 
            String apellido2, String nombre1, String nombre2, String email, String telefono, 
            String programa, Integer puntajeGlobal, Integer comEscrita, Integer razCuant, 
            Integer lecCritica, Integer compCiudadanas, Integer ingles, Integer formProyectos, 
            Integer disenoSoft) {
        
        ResultadoSaberPro resultado = new ResultadoSaberPro();
        
        // Informaci√≥n personal
        resultado.setDocumento(documento);
        resultado.setNumeroRegistro(documento);
        resultado.setTipoDocumento(tipoDoc);
        resultado.setPrimerApellido(apellido1);
        resultado.setSegundoApellido(apellido2);
        resultado.setPrimerNombre(nombre1);
        resultado.setSegundoNombre(nombre2);
        resultado.setCorreoElectronico(email);
        resultado.setNumeroTelefono(telefono);
        resultado.setProgramaAcademico(programa);
        resultado.setFechaExamen(LocalDate.now().minusMonths(1));

        // Puntajes
        resultado.setPuntajeGlobal(puntajeGlobal);
        resultado.setComunicacionEscrita(comEscrita);
        resultado.setRazonamientoCuantitativo(razCuant);
        resultado.setLecturaCritica(lecCritica);
        resultado.setCompetenciasCiudadanas(compCiudadanas);
        resultado.setIngles(ingles);
        resultado.setFormulacionProyectosIngenieria(formProyectos);
        resultado.setDisenoSoftware(disenoSoft);

        // Informaci√≥n acad√©mica
        resultado.setTrabajoGradoAprobado(false);
        resultado.setSeminarioMatriculado(false);
        resultado.setValorDerechosGrado(500000.0);
        resultado.setDescuentoAplicado(0.0);

        return resultado;
    }

    private void initializeTiposIncentivos() {
        System.out.println("ÔøΩ Creando tipos de incentivos configurables...");
        
        if (tipoIncentivoRepository.count() == 0) {
            // Tipo 1: Beca 100% para puntajes excelentes (241+)
            TipoIncentivo tipo1 = new TipoIncentivo(
                "Beca 100% Derechos de Grado",
                "Exoneraci√≥n completa de derechos de grado + Seminario nota 5.0",
                241, // Puntaje m√≠nimo
                500000.0, // Monto
                "- Exoneraci√≥n 100% derechos de grado\n- Seminario de grado IV con nota 5.0\n- Ceremonia de reconocimiento",
                "Coordinador"
            );
            tipoIncentivoRepository.save(tipo1);
            System.out.println("‚úÖ Tipo creado: Beca 100% (‚â•241 puntos)");

            // Tipo 2: Beca 50% para puntajes muy buenos (211-240)
            TipoIncentivo tipo2 = new TipoIncentivo(
                "Beca 50% Derechos de Grado",
                "Descuento del 50% en derechos + Seminario nota 4.7",
                211, // Puntaje m√≠nimo
                250000.0, // Monto
                "- Descuento 50% derechos de grado\n- Seminario de grado IV con nota 4.7\n- Certificado de reconocimiento",
                "Coordinador"
            );
            tipoIncentivoRepository.save(tipo2);

            // Tipo 3: Exoneraci√≥n seminario para puntajes buenos (180-210)
            TipoIncentivo tipo3 = new TipoIncentivo(
                "Exoneraci√≥n Seminario",
                "Seminario de grado IV con nota 4.5",
                180, // Puntaje m√≠nimo
                0.0, // Sin monto econ√≥mico
                "- Exoneraci√≥n informe final trabajo de grado\n- Seminario de grado IV con nota 4.5",
                "Coordinador"
            );
            tipoIncentivoRepository.save(tipo3);

            // Tipo 4: Reconocimiento especial para puntajes sobresalientes (250+)
            TipoIncentivo tipo4 = new TipoIncentivo(
                "Reconocimiento Excelencia Acad√©mica",
                "Reconocimiento p√∫blico + beneficios adicionales",
                250, // Puntaje m√≠nimo
                1000000.0, // Monto adicional
                "- Beca completa derechos de grado\n- Reconocimiento p√∫blico\n- Carta de recomendaci√≥n\n- Prioridad en becas futuras",
                "Coordinador"
            );
            tipoIncentivoRepository.save(tipo4);
        }
    }

    private void evaluarIncentivoAutomatico() {
        try {
            List<EstudianteResultado> estudiantes = estudianteResultadoRepository.findAll();
            if (!estudiantes.isEmpty()) {
                evaluacionService.reevaluarTodosLosEstudiantes(estudiantes);
            }
        } catch (Exception e) {
            System.err.println("‚ùå Error en evaluaci√≥n autom√°tica: " + e.getMessage());
        }
    }

    /**
     * Calcula el nivel de competencia basado en el puntaje
     */
    private String calcularNivelCompetencia(Integer puntaje) {
        if (puntaje == null) {
            return "Sin informaci√≥n";
        }
        
        if (puntaje >= 200) {
            return "Satisfactorio";
        } else if (puntaje >= 150) {
            return "M√≠nimo";
        } else {
            return "Insuficiente";
        }
    }
}